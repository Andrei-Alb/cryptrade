#!/usr/bin/env python3
"""
Script de Inicializa√ß√£o do Rob√¥ de Trading
Verifica depend√™ncias e inicia o sistema completo
"""

import os
import sys
import time
import subprocess
import requests
from datetime import datetime
from loguru import logger

# Configurar logging
os.makedirs('logs', exist_ok=True)
logger.add("logs/inicializacao.log", rotation="1 week")

def verificar_ollama():
    """
    Verifica se o Ollama est√° rodando e acess√≠vel
    """
    try:
        logger.info("üîç Verificando Ollama...")
        
        # Verificar se o processo est√° rodando
        result = subprocess.run(['pgrep', 'ollama'], capture_output=True, text=True)
        if result.returncode != 0:
            logger.error("‚ùå Ollama n√£o est√° rodando!")
            logger.info("üí° Execute: ollama serve")
            return False
        
        # Verificar se a API est√° respondendo
        try:
            response = requests.get('http://localhost:11434/api/tags', timeout=5)
            if response.status_code == 200:
                models = response.json().get('models', [])
                logger.info(f"‚úÖ Ollama OK - Modelos dispon√≠veis: {len(models)}")
                for model in models:
                    logger.info(f"   üì¶ {model['name']}")
                return True
            else:
                logger.error(f"‚ùå API Ollama retornou status {response.status_code}")
                return False
        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå N√£o foi poss√≠vel conectar ao Ollama: {e}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Erro ao verificar Ollama: {e}")
        return False

def verificar_modelo_ia():
    """
    Verifica se o modelo Llama 3.1 8B est√° dispon√≠vel
    """
    try:
        logger.info("ü§ñ Verificando modelo Llama 3.1 8B...")
        
        response = requests.get('http://localhost:11434/api/tags', timeout=5)
        if response.status_code == 200:
            models = response.json().get('models', [])
            for model in models:
                if 'llama3.1:8b' in model['name'].lower():
                    logger.info(f"‚úÖ Modelo Llama 3.1 8B encontrado")
                    return True
            
            logger.warning("‚ö†Ô∏è Modelo Llama 3.1 8B n√£o encontrado")
            logger.info("üí° Execute: ollama pull llama3.1:8b")
            return False
        else:
            logger.error("‚ùå N√£o foi poss√≠vel verificar modelos")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Erro ao verificar modelo: {e}")
        return False

def verificar_banco_dados():
    """
    Verifica se o banco de dados est√° acess√≠vel
    """
    try:
        logger.info("üóÑÔ∏è Verificando banco de dados...")
        
        import sqlite3
        from armazenamento import Armazenamento
        
        armazenamento = Armazenamento()
        
        # Testar conex√£o
        try:
            conn = sqlite3.connect(armazenamento.db_path)
            c = conn.cursor()
            c.execute('SELECT 1')
            conn.close()
            logger.info("‚úÖ Banco de dados OK")
            return True
        except Exception as e:
            logger.error(f"‚ùå Falha na conex√£o com banco de dados: {e}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Erro ao verificar banco de dados: {e}")
        return False

def verificar_configuracao():
    """
    Verifica se a configura√ß√£o est√° v√°lida
    """
    try:
        logger.info("‚öôÔ∏è Verificando configura√ß√£o...")
        
        import config
        config_data = config.load_config()
        
        # Se√ß√µes essenciais
        required_sections = ['trading', 'ia']
        for section in required_sections:
            if section not in config_data:
                logger.error(f"‚ùå Se√ß√£o '{section}' n√£o encontrada na configura√ß√£o")
                return False
        
        # Se√ß√µes opcionais (adicionar se n√£o existirem)
        optional_sections = ['b3', 'coleta']
        for section in optional_sections:
            if section not in config_data:
                logger.warning(f"‚ö†Ô∏è Se√ß√£o '{section}' n√£o encontrada - usando configura√ß√£o padr√£o")
                # Adicionar se√ß√£o padr√£o se n√£o existir
                if section == 'b3':
                    config_data[section] = {
                        'api_url': 'https://api.b3.com.br',
                        'simbolos': ['WINM24', 'WINN24', 'WINQ24'],
                        'timeout': 30,
                        'retry_attempts': 3
                    }
                elif section == 'coleta':
                    config_data[section] = {
                        'frequencia': 30,
                        'horario_inicio': '09:00',
                        'horario_fim': '17:00',
                        'dias_semana': [0, 1, 2, 3, 4],
                        'timeout': 30
                    }
        
        logger.info("‚úÖ Configura√ß√£o OK")
        logger.info(f"   üìã Se√ß√µes: {list(config_data.keys())}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao verificar configura√ß√£o: {e}")
        return False

def testar_coletor():
    """
    Testa o coletor de dados da B3
    """
    try:
        logger.info("üìä Testando coletor de dados...")
        
        from coletor import Coletor
        
        coletor = Coletor()
        dados = coletor.coletar_dados()
        
        if dados and len(dados) > 0:
            logger.info(f"‚úÖ Coletor OK - {len(dados)} s√≠mbolos coletados")
            for dado in dados[:3]:  # Mostrar apenas os primeiros 3
                logger.info(f"   üìà {dado['simbolo']}: {dado['preco_atual']}")
            return True
        else:
            logger.warning("‚ö†Ô∏è Coletor n√£o retornou dados (pode ser normal fora do hor√°rio de mercado)")
            logger.info("üí° O coletor pode n√£o retornar dados fora do hor√°rio de mercado")
            return True  # N√£o √© um erro cr√≠tico
            
    except Exception as e:
        logger.error(f"‚ùå Erro ao testar coletor: {e}")
        logger.info("üí° Verificando se √© problema de conectividade...")
        return True  # N√£o √© um erro cr√≠tico para iniciar o rob√¥

def testar_ia():
    """
    Testa a conex√£o com a IA
    """
    try:
        logger.info("ü§ñ Testando conex√£o com IA...")
        
        from analisador import AnalisadorIA
        import config
        
        config_data = config.load_config()
        analisador = AnalisadorIA(config_data)
        
        if analisador.testar_conexao():
            logger.info("‚úÖ Conex√£o com IA OK")
            return True
        else:
            logger.warning("‚ö†Ô∏è Falha na conex√£o com IA (pode ser timeout)")
            logger.info("üí° A IA pode estar carregando o modelo...")
            return True  # N√£o √© um erro cr√≠tico
            
    except Exception as e:
        logger.error(f"‚ùå Erro ao testar IA: {e}")
        logger.info("üí° Verificando se √© problema de configura√ß√£o...")
        return True  # N√£o √© um erro cr√≠tico para iniciar o rob√¥

def iniciar_robo():
    """
    Inicia o rob√¥ de trading
    """
    try:
        logger.info("üöÄ Iniciando rob√¥ de trading...")
        
        # Importar e executar o rob√¥
        from robo_ia_tempo_real import RoboIATempoReal
        
        rob√¥ = RoboIATempoReal()
        rob√¥.executar()
        
    except KeyboardInterrupt:
        logger.info("‚ö†Ô∏è Rob√¥ interrompido pelo usu√°rio")
    except Exception as e:
        logger.error(f"‚ùå Erro fatal no rob√¥: {e}")
        sys.exit(1)

def main():
    """
    Fun√ß√£o principal de inicializa√ß√£o
    """
    logger.info("=" * 60)
    logger.info("ü§ñ INICIALIZADOR DO ROB√î DE TRADING")
    logger.info("=" * 60)
    logger.info(f"üïê In√≠cio: {datetime.now()}")
    
    # Lista de verifica√ß√µes cr√≠ticas (devem passar)
    verificacoes_criticas = [
        ("Ollama", verificar_ollama),
        ("Modelo IA", verificar_modelo_ia),
        ("Banco de Dados", verificar_banco_dados),
        ("Configura√ß√£o", verificar_configuracao)
    ]
    
    # Lista de verifica√ß√µes n√£o-cr√≠ticas (podem falhar)
    verificacoes_opcionais = [
        ("Coletor B3", testar_coletor),
        ("Conex√£o IA", testar_ia)
    ]
    
    # Executar verifica√ß√µes cr√≠ticas
    logger.info("\nüîç VERIFICA√á√ïES CR√çTICAS:")
    todas_criticas_ok = True
    for nome, verificacao in verificacoes_criticas:
        logger.info(f"\nüîç Verificando {nome}...")
        if not verificacao():
            todas_criticas_ok = False
            logger.error(f"‚ùå Falha cr√≠tica na verifica√ß√£o: {nome}")
            break
        time.sleep(1)
    
    if not todas_criticas_ok:
        logger.error("\n‚ùå FALHA NAS VERIFICA√á√ïES CR√çTICAS")
        logger.error("Corrija os problemas acima antes de continuar")
        sys.exit(1)
    
    # Executar verifica√ß√µes opcionais
    logger.info("\nüîç VERIFICA√á√ïES OPCIONAIS:")
    for nome, verificacao in verificacoes_opcionais:
        logger.info(f"\nüîç Verificando {nome}...")
        verificacao()
        time.sleep(1)
    
    logger.info("\n‚úÖ TODAS AS VERIFICA√á√ïES PASSARAM!")
    logger.info("üöÄ Iniciando rob√¥ de trading...")
    logger.info("=" * 60)
    
    # Iniciar rob√¥
    iniciar_robo()

if __name__ == "__main__":
    main() 